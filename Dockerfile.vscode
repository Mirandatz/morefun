FROM python:3.10.2-bullseye as reqs_builder

COPY requirements requirements
# uncomment to update requirements
# RUN pip install pip-compile-multi
# RUN pip-compile-multi



FROM nvidia/cuda:11.5.1-cudnn8-runtime-ubuntu20.04

ENV TZ=America/Sao_Paulo
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update \
    && apt-get install --no-install-recommends --no-install-suggests -y \
    git \
    wget \
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

RUN wget -O Miniforge3.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh" \
    && /bin/bash Miniforge3.sh -b \
    && rm Miniforge3.sh
ENV PATH=/root/miniforge3/bin:$PATH

SHELL ["/bin/bash", "-c", "-i"]
RUN conda init bash
RUN conda activate
RUN conda install python=3.10

COPY --from=reqs_builder requirements requirements
RUN pip install -r requirements/dev.txt --no-cache-dir

# RUN eval "$(~/bin/micromamba shell hook -s posix)" \
#     && micromamba activate \
#     && micromamba install -y -c conda-forge \
#     python=3.10


# COPY requirements requirements
# RUN pip install -r requirements/dev.txt --no-cache-dir

# SHELL ["/bin/bash", "-c"] 

# RUN micromamba create -n gge_dev
# RUN micromamba activate gge_dev/
# RUN micromamba install -y -c conda-forge python=3.10 

# RUN eval "$(micromamba shell hook --shell=bash)" \
# && micromamba activate 
# && micromamba install -y -c conda-forge \
# python=3.10

# COPY requirements requirements
# RUN micromamba activate \
# && pip install -r requirements/dev.txt --no-cache-dir


# SHELL ["/bin/bash", "-i", "-c"]

# RUN micromamba shell init --shell=bash --prefix=~/micromamba

# RUN eval "$(micromamba shell hook --shell=bash)" \
#     && micromamba activate \
#     && micromamba install -y -c conda-forge python=3.10 \
#     && micromamba install -y -c conda-forge pip

# # RUN eval "$(micromamba shell hook --shell=bash)" \
# # && micromamba activate 
# # && micromamba install -y -c conda-forge \
# # python=3.10

# COPY requirements requirements
# RUN micromamba activate \
#     && pip install -r requirements/dev.txt --no-cache-dir
